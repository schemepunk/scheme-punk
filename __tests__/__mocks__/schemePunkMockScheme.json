{
  "$schema": "http://json-schema.org/draft-04/hyper-schema#",
  "type": "object",
  "title": "Mock Schema for scheme Punk.",
  "description": "mock entity for scheme punk.",
  "id": "test/helpers/schemePunkMockScheme.json#",
  "properties": {
    "data": {
      "type": "object",
      "properties": {
        "type": {
          "description": "The type describing the mock resource.",
          "type": "string",
          "enum": [
            "schemePunkMockScheme"
          ]
        },
        "id": {
          "type": "string",
          "description": "A universal unique identifier for this resource."
        },
        "attributes": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "A title."
            },
            "description": {
              "type": "string",
              "description": "A description for this resource."
            },
            "numberProperty": {
              "description": "A number property on this entity.",
              "type": "integer",
              "minimum": 0,
              "exclusiveMinimum": true
            }
          }
        }
      }
    }
  },
  "links": [
    {
      "rel": "search",
      "method": "GET",
      "href": "/schemePunkMockScheme/{id}",
      "targetSchema": {
        "$ref": "#/properties/data"
      },
      "schema": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "If this parameter is specified the payload is limited to the fields included as a value. If there are multiple fields they should be delimited by a comma.",
            "pattern": "/^\\w{1}(\\w+,?){1,}/"
          }
        }
      }
    },
    {
      "rel": "collection",
      "method": "GET",
      "href": "/schemePunkMockScheme",
      "targetSchema": {
        "type": "array",
        "items": {
          "$ref": "#/properties/data"
        }
      },
      "schema": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "string",
            "description": "If this parameter is specified the payload is limited to the fields included as a value. If there are multiple fields they should be delimited by a comma.",
            "pattern": "/^\\w{1}(\\w+,?){1,}/"
          },
          "sort": {
            "type": "string",
            "pattern": "/^-?[\\w,-]+/",
            "description": "Sorts the results in Ascending order by default. Results can be sorted by multiple properties by listing every property in a comma-separated string, in the order that you want to sort by. Prefixing the property name with a dash (-) will sort by that property in a descending order."
          }
        }
      }
    }
  ]
}
